{"version":3,"sources":["user.js"],"names":["express","require","validateName","validateEmail","Router","db","validateUser","router","req","res","next","User","find","exec","then","response","multer","err","send","JSON","parse","stringify","get","params","newUser","result","regeneratorRuntime","async","_context","prev","body","awrap","save","sent","status","json","t0","log","error","stop","put","data","name","rating","releaseDate","description","duration","findOneAndUpdate","_id","id","$set","returnNewDocument","_context2","deleteOne","deletedCount","message"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,oBACkBA,QAAQ,gBAAxCC,sBAAAA,aAAcC,uBAAAA,cADlBH,OAAOA,QAAUI,SAIjBC,GAAKJ,QAH+BA,2BAKtBA,QAAQ,qBALJE,gBAAAA,MAMhBG,aAAeL,QAAQ,gBALzBM,OAASP,QAAQI,UAKrBG,OAAMD,IAAAA,IAAY,SAAUE,EAACC,EAAAC,GAU5BL,GAAGM,KAAKC,OAAOC,OAAOC,KAAK,SAACC,GAT7BN,EAAMO,KAAMD,KASX,MAFD,SAAAE,GAKER,EAAIS,KAAKC,KAAKC,MAAMD,KAAKE,UAAUJ,SADnCV,OAFDe,IAAA,QAES,SAASd,EAAAC,EAAAC,GACjBD,GAAAA,KAAIS,QAAS,CAACE,IAAMD,EAAII,OAACF,KAAUJ,KAAnC,SAAAA,EAAAF,GACAN,EAJDS,KAAAH,OASgBR,OAAwBM,KAAK,GAAA,SAAAL,EAAeO,GAAf,IAAAS,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAlB,MAAA,KAAA,EAAA,OAAAkB,EAAAC,KAAA,EAA7CL,EAAA,IAAAnB,GAAAM,KAAAH,EAAAsB,MAA6CF,EAAAlB,KAAA,EAAAgB,mBAAAK,MAD9CP,EAAAQ,QAC8C,KAAA,EAD9CP,EAC8CG,EAAAK,KAK9CxB,EAAAyB,OAAA,KAAAC,KAAAV,GAL8CG,EAAAlB,KAAA,GAAA,MAAA,KAAA,EAAAkB,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAQ9CrB,QAAA8B,IAAA9B,EAAAA,IAAgBE,EAAAyB,OAAA,KAAAC,KAAA,CAAAG,MAAA,iBAR8B,KAAA,GAAA,IAAA,MAAA,OAAAV,EAAAW,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAQ9BhC,OAAAiC,IAAA,UAAA,SAAAhC,EAAAC,EAAAC,GAgBf,IAAI+B,EAAO,CAhBIC,KAAAlC,EAAAsB,KAAAY,KAGPjB,QAAAA,EAHOK,KAAAa,OAIblC,KAAAA,EAAIyB,KAAAA,KAJSU,YAAApC,EAAAsB,KAAAc,YAAAC,YAAArC,EAAAsB,KAAAe,YAsBZC,SAAUtC,EAAIsB,KAAKgB,UAtBPzC,GAAAM,KAAAoC,iBAAA,CAAAC,IAAAxC,EAAAsB,KAAAmB,IAAA,CAAAC,KAAAT,GAAA,CAAAU,mBAAA,MAOQ5C,OAAA,OAArB,OAAA,SAAAC,EAAAC,GAAA,OAAAiB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAA1C,MAAA,KAAA,EAAA,OAAA0C,EAAAvB,KAAA,EAAAuB,EAAA1C,KAAA,EAAAgB,mBAAAK,MAPa1B,GAAAM,KAAA0C,UAAA,CAAAL,IAAAxC,EAAAe,OAAA0B,MAOb,KAAA,EAPa,IAObG,EAAAnB,KAPaqB,aAAA7C,EAAAyB,OAAA,KAAAC,KAAA,CAAAG,MAAA,mBAAA7B,EAAAyB,OAAA,KAAAC,KAAA,CAAAoB,QAAA,8BAObH,EAAA1C,KAAA,GAAA,MAAA,KAAA,EAAA0C,EAAAvB,KAAA,EAAAuB,EAAAhB,GAAAgB,EAAA,MAAA,GAOH7C,QAAA8B,IAAA9B,EAAAA,IAECE,EAAIgC,OAAO,KAAAN,KAAA,CAAAG,MAAA,iBATT,KAAA,GAAA,IAAA,MAAA,OAAAc,EAAAb,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAaCK,OAAAA,QAAapC","file":"user.min.js","sourcesContent":["var express = require('express');\r\nconst { validateName, validateEmail } = require('./validation');\r\nvar router = express.Router();\r\n\r\nvar db = require(\"./database.js\");\r\n// const { body, validationResult } = require('express-validator');\r\nconst { check } = require('express-validator');\r\nconst validateUser = require('./validation');\r\nconst multer = require('multer');\r\n\r\n\r\n\r\n  \r\n\r\n\r\n/* GET all users listing. */\r\nrouter.get('/', function (req, res, next) {\r\n\tdb.User.find().exec().then((response) => {\r\n\t\tres.send(response);\r\n\t}).catch((err) => {\r\n\t\tres.send(JSON.parse(JSON.stringify(err)));\r\n\t});\r\n});\r\n\r\n/* GET User info by id */\r\nrouter.get('/:id/', function (req, res, next) {\r\n\tdb.User.findOne({ _id: req.params.id }).exec(function (err, response) {\r\n\t\tres.send(response);\r\n\t})\r\n});\r\n\r\n/* Create new user. */\r\n\r\n\r\nrouter.post('', async (req, res, next) => {\r\n\ttry {\r\n\t  const newUser = new db.User(req.body);\r\n\t  const result = await newUser.save();\r\n\t  res.status(201).json(result);\r\n\t} catch (err) {\r\n\t  console.log(err);\r\n\t  res.status(500).json({ error: 'Server error' });\r\n\t}\r\n  });\r\n\r\n  \r\n  \r\n  \r\nrouter.put('/update', function (req, res, next) {\r\n\r\n\tvar data = {\r\n    name: req.body.name,\r\n    ratings: req.body.rating,\r\n    cast: req.body.cast,\r\n    releaseDate: req.body.releaseDate,\r\n    description: req.body.description,\r\n    duration: req.body.duration\r\n\t};\r\n\r\n\tdb.User.findOneAndUpdate({ \"_id\": req.body.id }, { $set: data }, { returnNewDocument: true });\r\n});\r\n\r\n/* Delete user by id */\r\nrouter.delete(\"/:id\", async function (req, res, next) {\r\n\ttry {\r\n\t\tconst deleteResult = await db.User.deleteOne({ _id: req.params.id });\r\n\t\tif (deleteResult.deletedCount === 0) {\r\n\t\t\tres.status(404).json({ error: \"User not found\" });\r\n\t\t} else {\r\n\t\t\tres.status(200).json({ message: \"User deleted successfully\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\tres.status(500).json({ error: \"Server error\" });\r\n\t}\r\n});\r\n\r\nmodule.exports = router;"]}
{"version":3,"sources":["user.js"],"names":["express","require","validateName","validateEmail","router","Router","db","check","validateUser","multer","get","req","res","next","User","find","exec","then","response","send","err","JSON","parse","stringify","findOne","_id","params","id","post","newUser","body","save","result","status","json","console","log","error","put","data","name","ratings","rating","cast","releaseDate","description","duration","findOneAndUpdate","$set","returnNewDocument","deleteOne","deleteResult","deletedCount","message","module","exports"],"mappings":"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","sourcesContent":["var express = require('express');\r\nconst { validateName, validateEmail } = require('./validation');\r\nvar router = express.Router();\r\n\r\nvar db = require(\"./database.js\");\r\n// const { body, validationResult } = require('express-validator');\r\nconst { check } = require('express-validator');\r\nconst validateUser = require('./validation');\r\nconst multer = require('multer');\r\n\r\n\r\n\r\n  \r\n\r\n\r\n/* GET all users listing. */\r\nrouter.get('/', function (req, res, next) {\r\n\tdb.User.find().exec().then((response) => {\r\n\t\tres.send(response);\r\n\t}).catch((err) => {\r\n\t\tres.send(JSON.parse(JSON.stringify(err)));\r\n\t});\r\n});\r\n\r\n/* GET User info by id */\r\nrouter.get('/:id/', function (req, res, next) {\r\n\tdb.User.findOne({ _id: req.params.id }).exec(function (err, response) {\r\n\t\tres.send(response);\r\n\t})\r\n});\r\n\r\n/* Create new user. */\r\n\r\n\r\nrouter.post('', async (req, res, next) => {\r\n\ttry {\r\n\t  const newUser = new db.User(req.body);\r\n\t  const result = await newUser.save();\r\n\t  res.status(201).json(result);\r\n\t} catch (err) {\r\n\t  console.log(err);\r\n\t  res.status(500).json({ error: 'Server error' });\r\n\t}\r\n  });\r\n\r\n  \r\n  \r\n  \r\nrouter.put('/update', function (req, res, next) {\r\n\r\n\tvar data = {\r\n    name: req.body.name,\r\n    ratings: req.body.rating,\r\n    cast: req.body.cast,\r\n    releaseDate: req.body.releaseDate,\r\n    description: req.body.description,\r\n    duration: req.body.duration\r\n\t};\r\n\r\n\tdb.User.findOneAndUpdate({ \"_id\": req.body.id }, { $set: data }, { returnNewDocument: true });\r\n});\r\n\r\n/* Delete user by id */\r\nrouter.delete(\"/:id\", async function (req, res, next) {\r\n\ttry {\r\n\t\tconst deleteResult = await db.User.deleteOne({ _id: req.params.id });\r\n\t\tif (deleteResult.deletedCount === 0) {\r\n\t\t\tres.status(404).json({ error: \"User not found\" });\r\n\t\t} else {\r\n\t\t\tres.status(200).json({ message: \"User deleted successfully\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\tres.status(500).json({ error: \"Server error\" });\r\n\t}\r\n});\r\n\r\nmodule.exports = router;"],"file":"user.dev.js"}